#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_SampleTactContract.headers.fc";
#include "sample_SampleTactContract.stdlib.fc";
#include "sample_SampleTactContract.constants.fc";
#include "sample_SampleTactContract.storage.fc";

;;
;; Contract SampleTactContract functions
;;

(slice, int, cell) $SampleTactContract$_contract_init(slice $owner, int $seq) impure inline_ref {
    var (($self'owner, $self'seq, $self'challenges)) = (null(), null(), null());
    $self'owner = $owner;
    $self'seq = $seq;
    return ($self'owner, $self'seq, $self'challenges);
}

((slice, int, cell), cell) $SampleTactContract$_fun_challenges((slice, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'seq, $self'challenges)) = $self;
    return (($self'owner, $self'seq, $self'challenges), $self'challenges);
}

;;
;; Receivers of a Contract SampleTactContract
;;

(((slice, int, cell)), ()) $SampleTactContract$_internal_binary_CreateChallenge((slice, int, cell) $self, (int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'seq, $self'challenges) = $self;
    var ($msg'challengeId, $msg'userId, $msg'gameId) = $msg;
    var ($c'challengeId, $c'userId, $c'gameId, $c'betAmount) = $Challenge$_constructor_challengeId_userId_gameId_betAmount($msg'challengeId, $msg'userId, $msg'gameId, 5);
    $self'challenges~__tact_dict_set_int_cell(257, $msg'challengeId, $Challenge$_store_cell(($c'challengeId, $c'userId, $c'gameId, $c'betAmount)));
    ($self'owner, $self'seq, $self'challenges)~$SampleTactContract$_fun_reply(__gen_cell_comment_17d8063a1c0f4ad0a53ed18ebce1ebda48cb2ff13de2fcd04cf6b759f56cf81a());
    return (($self'owner, $self'seq, $self'challenges), ());
}

((slice, int, cell), ()) $SampleTactContract$_internal_text_9c934179ecdd6d432f5c691bdf4b6356e1c3ce20ad0318d69cc273293fd0b431((slice, int, cell) $self) impure inline {
    var ($self'owner, $self'seq, $self'challenges) = $self;
    ($self'owner, $self'seq, $self'challenges)~$SampleTactContract$_fun_reply(__gen_cell_comment_fa600810c5e866a353ac9c288ce1914099017be386780462949cc21a3481c525());
    return (($self'owner, $self'seq, $self'challenges), ());
}

(((slice, int, cell)), ()) $SampleTactContract$_internal_binary_Deploy((slice, int, cell) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'seq, $self'challenges) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'seq, $self'challenges)~$SampleTactContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'seq, $self'challenges), ());
}

;;
;; Get methods of a Contract SampleTactContract
;;

_ %challenges() method_id(78128) {
    var self = $SampleTactContract$_contract_load();
    var res = self~$SampleTactContract$_fun_challenges();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmURyWzB5knUsBqqLjFkwf1myxv8QgDH61ZerMn5yunpB7";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleTactContract
;;

((slice, int, cell), int) $SampleTactContract$_contract_router_internal((slice, int, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive CreateChallenge message
    if (op == 3744466772) {
        var msg = in_msg~$CreateChallenge$_load();
        self~$SampleTactContract$_internal_binary_CreateChallenge(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SampleTactContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "join challenge" message
        if (text_op == 0x9c934179ecdd6d432f5c691bdf4b6356e1c3ce20ad0318d69cc273293fd0b431) {
            self~$SampleTactContract$_internal_text_9c934179ecdd6d432f5c691bdf4b6356e1c3ce20ad0318d69cc273293fd0b431();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleTactContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleTactContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SampleTactContract$_contract_store(self);
}
